ARM GAS  C:\Users\ASUS\AppData\Local\Temp\ccgeWLcE.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"u8g2_ll_hvline.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.u8g2_ll_hvline_vertical_top_lsb,"ax",%progbits
  16              		.align	1
  17              		.global	u8g2_ll_hvline_vertical_top_lsb
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	u8g2_ll_hvline_vertical_top_lsb:
  24              	.LFB0:
  25              		.file 1 "Core/u8g2/u8g2_ll_hvline.c"
   1:Core/u8g2/u8g2_ll_hvline.c **** /*
   2:Core/u8g2/u8g2_ll_hvline.c **** 
   3:Core/u8g2/u8g2_ll_hvline.c ****   u8g2_ll_hvline.c
   4:Core/u8g2/u8g2_ll_hvline.c ****   
   5:Core/u8g2/u8g2_ll_hvline.c ****   low level hvline
   6:Core/u8g2/u8g2_ll_hvline.c **** 
   7:Core/u8g2/u8g2_ll_hvline.c ****   Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   8:Core/u8g2/u8g2_ll_hvline.c **** 
   9:Core/u8g2/u8g2_ll_hvline.c ****   Copyright (c) 2016, olikraus@gmail.com
  10:Core/u8g2/u8g2_ll_hvline.c ****   All rights reserved.
  11:Core/u8g2/u8g2_ll_hvline.c **** 
  12:Core/u8g2/u8g2_ll_hvline.c ****   Redistribution and use in source and binary forms, with or without modification, 
  13:Core/u8g2/u8g2_ll_hvline.c ****   are permitted provided that the following conditions are met:
  14:Core/u8g2/u8g2_ll_hvline.c **** 
  15:Core/u8g2/u8g2_ll_hvline.c ****   * Redistributions of source code must retain the above copyright notice, this list 
  16:Core/u8g2/u8g2_ll_hvline.c ****     of conditions and the following disclaimer.
  17:Core/u8g2/u8g2_ll_hvline.c ****     
  18:Core/u8g2/u8g2_ll_hvline.c ****   * Redistributions in binary form must reproduce the above copyright notice, this 
  19:Core/u8g2/u8g2_ll_hvline.c ****     list of conditions and the following disclaimer in the documentation and/or other 
  20:Core/u8g2/u8g2_ll_hvline.c ****     materials provided with the distribution.
  21:Core/u8g2/u8g2_ll_hvline.c **** 
  22:Core/u8g2/u8g2_ll_hvline.c ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  23:Core/u8g2/u8g2_ll_hvline.c ****   CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  24:Core/u8g2/u8g2_ll_hvline.c ****   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  25:Core/u8g2/u8g2_ll_hvline.c ****   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  26:Core/u8g2/u8g2_ll_hvline.c ****   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  27:Core/u8g2/u8g2_ll_hvline.c ****   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  28:Core/u8g2/u8g2_ll_hvline.c ****   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  29:Core/u8g2/u8g2_ll_hvline.c ****   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  30:Core/u8g2/u8g2_ll_hvline.c ****   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  31:Core/u8g2/u8g2_ll_hvline.c ****   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  32:Core/u8g2/u8g2_ll_hvline.c ****   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  33:Core/u8g2/u8g2_ll_hvline.c ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
ARM GAS  C:\Users\ASUS\AppData\Local\Temp\ccgeWLcE.s 			page 2


  34:Core/u8g2/u8g2_ll_hvline.c ****   ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  35:Core/u8g2/u8g2_ll_hvline.c **** 
  36:Core/u8g2/u8g2_ll_hvline.c **** 
  37:Core/u8g2/u8g2_ll_hvline.c ****   *ptr |= or_mask
  38:Core/u8g2/u8g2_ll_hvline.c ****   *ptr ^= xor_mask
  39:Core/u8g2/u8g2_ll_hvline.c ****   
  40:Core/u8g2/u8g2_ll_hvline.c ****   color = 0:   or_mask = 1, xor_mask = 1
  41:Core/u8g2/u8g2_ll_hvline.c ****   color = 1:   or_mask = 1, xor_mask = 0
  42:Core/u8g2/u8g2_ll_hvline.c ****   color = 2:   or_mask = 0, xor_mask = 1
  43:Core/u8g2/u8g2_ll_hvline.c **** 
  44:Core/u8g2/u8g2_ll_hvline.c ****   if ( color <= 1 )
  45:Core/u8g2/u8g2_ll_hvline.c ****     or_mask  = mask;
  46:Core/u8g2/u8g2_ll_hvline.c ****   if ( color != 1 )
  47:Core/u8g2/u8g2_ll_hvline.c ****     xor_mask = mask;
  48:Core/u8g2/u8g2_ll_hvline.c ****     
  49:Core/u8g2/u8g2_ll_hvline.c **** */
  50:Core/u8g2/u8g2_ll_hvline.c **** 
  51:Core/u8g2/u8g2_ll_hvline.c **** #include <assert.h>
  52:Core/u8g2/u8g2_ll_hvline.c **** #include "../u8g2/u8g2.h"
  53:Core/u8g2/u8g2_ll_hvline.c **** 
  54:Core/u8g2/u8g2_ll_hvline.c **** /*=================================================*/
  55:Core/u8g2/u8g2_ll_hvline.c **** /*
  56:Core/u8g2/u8g2_ll_hvline.c ****   u8g2_ll_hvline_vertical_top_lsb
  57:Core/u8g2/u8g2_ll_hvline.c ****     SSD13xx
  58:Core/u8g2/u8g2_ll_hvline.c ****     UC1701    
  59:Core/u8g2/u8g2_ll_hvline.c **** */
  60:Core/u8g2/u8g2_ll_hvline.c **** 
  61:Core/u8g2/u8g2_ll_hvline.c **** 
  62:Core/u8g2/u8g2_ll_hvline.c **** #ifdef U8G2_WITH_HVLINE_SPEED_OPTIMIZATION
  63:Core/u8g2/u8g2_ll_hvline.c **** 
  64:Core/u8g2/u8g2_ll_hvline.c **** /*
  65:Core/u8g2/u8g2_ll_hvline.c ****   x,y		Upper left position of the line within the local buffer (not the display!)
  66:Core/u8g2/u8g2_ll_hvline.c ****   len		length of the line in pixel, len must not be 0
  67:Core/u8g2/u8g2_ll_hvline.c ****   dir		0: horizontal line (left to right)
  68:Core/u8g2/u8g2_ll_hvline.c **** 		1: vertical line (top to bottom)
  69:Core/u8g2/u8g2_ll_hvline.c ****   asumption: 
  70:Core/u8g2/u8g2_ll_hvline.c ****     all clipping done
  71:Core/u8g2/u8g2_ll_hvline.c **** */
  72:Core/u8g2/u8g2_ll_hvline.c **** void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, u
  73:Core/u8g2/u8g2_ll_hvline.c **** {
  26              		.loc 1 73 0
  27              		.cfi_startproc
  28              		@ args = 4, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 20
  34              		.cfi_offset 4, -20
  35              		.cfi_offset 5, -16
  36              		.cfi_offset 6, -12
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 9DF814E0 		ldrb	lr, [sp, #20]	@ zero_extendqisi2
  40              	.LVL1:
  74:Core/u8g2/u8g2_ll_hvline.c ****   uint16_t offset;
  75:Core/u8g2/u8g2_ll_hvline.c ****   uint8_t *ptr;
ARM GAS  C:\Users\ASUS\AppData\Local\Temp\ccgeWLcE.s 			page 3


  76:Core/u8g2/u8g2_ll_hvline.c ****   uint8_t bit_pos, mask;
  77:Core/u8g2/u8g2_ll_hvline.c ****   uint8_t or_mask, xor_mask;
  78:Core/u8g2/u8g2_ll_hvline.c **** #ifdef __unix
  79:Core/u8g2/u8g2_ll_hvline.c ****   uint8_t *max_ptr = u8g2->tile_buf_ptr + u8g2_GetU8x8(u8g2)->display_info->tile_width*u8g2->tile_b
  80:Core/u8g2/u8g2_ll_hvline.c **** #endif
  81:Core/u8g2/u8g2_ll_hvline.c **** 
  82:Core/u8g2/u8g2_ll_hvline.c ****   //assert(x >= u8g2->buf_x0);
  83:Core/u8g2/u8g2_ll_hvline.c ****   //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  84:Core/u8g2/u8g2_ll_hvline.c ****   //assert(y >= u8g2->buf_y0);
  85:Core/u8g2/u8g2_ll_hvline.c ****   //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  86:Core/u8g2/u8g2_ll_hvline.c ****   
  87:Core/u8g2/u8g2_ll_hvline.c ****   /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  88:Core/u8g2/u8g2_ll_hvline.c ****   bit_pos = y;		/* overflow truncate is ok here... */
  89:Core/u8g2/u8g2_ll_hvline.c ****   bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  41              		.loc 1 89 0
  42 0006 02F00705 		and	r5, r2, #7
  43              	.LVL2:
  90:Core/u8g2/u8g2_ll_hvline.c ****   mask = 1;
  91:Core/u8g2/u8g2_ll_hvline.c ****   mask <<= bit_pos;
  44              		.loc 1 91 0
  45 000a 0124     		movs	r4, #1
  46 000c AC40     		lsls	r4, r4, r5
  47 000e E4B2     		uxtb	r4, r4
  48              	.LVL3:
  92:Core/u8g2/u8g2_ll_hvline.c **** 
  93:Core/u8g2/u8g2_ll_hvline.c ****   or_mask = 0;
  94:Core/u8g2/u8g2_ll_hvline.c ****   xor_mask = 0;
  95:Core/u8g2/u8g2_ll_hvline.c ****   if ( u8g2->draw_color <= 1 )
  49              		.loc 1 95 0
  50 0010 90F88670 		ldrb	r7, [r0, #134]	@ zero_extendqisi2
  51 0014 012F     		cmp	r7, #1
  52 0016 19D9     		bls	.L10
  93:Core/u8g2/u8g2_ll_hvline.c ****   xor_mask = 0;
  53              		.loc 1 93 0
  54 0018 0026     		movs	r6, #0
  55              	.L2:
  56              	.LVL4:
  96:Core/u8g2/u8g2_ll_hvline.c ****     or_mask  = mask;
  97:Core/u8g2/u8g2_ll_hvline.c ****   if ( u8g2->draw_color != 1 )
  57              		.loc 1 97 0
  58 001a 012F     		cmp	r7, #1
  59 001c 18D0     		beq	.L14
  60              	.LVL5:
  61              	.L3:
  98:Core/u8g2/u8g2_ll_hvline.c ****     xor_mask = mask;
  99:Core/u8g2/u8g2_ll_hvline.c **** 
 100:Core/u8g2/u8g2_ll_hvline.c **** 
 101:Core/u8g2/u8g2_ll_hvline.c ****   offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 102:Core/u8g2/u8g2_ll_hvline.c ****   offset &= ~7;
  62              		.loc 1 102 0
  63 001e 02F0F802 		and	r2, r2, #248
  64              	.LVL6:
 103:Core/u8g2/u8g2_ll_hvline.c ****   offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  65              		.loc 1 103 0
  66 0022 0768     		ldr	r7, [r0]
  67 0024 97F810C0 		ldrb	ip, [r7, #16]	@ zero_extendqisi2
  68              	.LVL7:
ARM GAS  C:\Users\ASUS\AppData\Local\Temp\ccgeWLcE.s 			page 4


 104:Core/u8g2/u8g2_ll_hvline.c ****   ptr = u8g2->tile_buf_ptr;
  69              		.loc 1 104 0
  70 0028 876B     		ldr	r7, [r0, #56]
  71              	.LVL8:
 105:Core/u8g2/u8g2_ll_hvline.c ****   ptr += offset;
 106:Core/u8g2/u8g2_ll_hvline.c ****   ptr += x;
  72              		.loc 1 106 0
  73 002a 02FB0C12 		mla	r2, r2, ip, r1
  74              	.LVL9:
  75 002e B918     		adds	r1, r7, r2
  76              	.LVL10:
 107:Core/u8g2/u8g2_ll_hvline.c ****   
 108:Core/u8g2/u8g2_ll_hvline.c ****   if ( dir == 0 )
  77              		.loc 1 108 0
  78 0030 BEF1000F 		cmp	lr, #0
  79 0034 16D1     		bne	.L4
  80              	.LVL11:
  81              	.L5:
 109:Core/u8g2/u8g2_ll_hvline.c ****   {
 110:Core/u8g2/u8g2_ll_hvline.c ****       do
 111:Core/u8g2/u8g2_ll_hvline.c ****       {
 112:Core/u8g2/u8g2_ll_hvline.c **** #ifdef __unix
 113:Core/u8g2/u8g2_ll_hvline.c **** 	assert(ptr < max_ptr);
 114:Core/u8g2/u8g2_ll_hvline.c **** #endif
 115:Core/u8g2/u8g2_ll_hvline.c **** 	*ptr |= or_mask;
  82              		.loc 1 115 0 discriminator 1
  83 0036 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
  84 0038 3243     		orrs	r2, r2, r6
  85 003a D2B2     		uxtb	r2, r2
 116:Core/u8g2/u8g2_ll_hvline.c **** 	*ptr ^= xor_mask;
  86              		.loc 1 116 0 discriminator 1
  87 003c 6240     		eors	r2, r2, r4
  88 003e 01F8012B 		strb	r2, [r1], #1
  89              	.LVL12:
 117:Core/u8g2/u8g2_ll_hvline.c **** 	ptr++;
 118:Core/u8g2/u8g2_ll_hvline.c **** 	len--;
  90              		.loc 1 118 0 discriminator 1
  91 0042 013B     		subs	r3, r3, #1
  92              	.LVL13:
 119:Core/u8g2/u8g2_ll_hvline.c ****       } while( len != 0 );
  93              		.loc 1 119 0 discriminator 1
  94 0044 13F0FF03 		ands	r3, r3, #255
  95              	.LVL14:
  96 0048 F5D1     		bne	.L5
  97              	.LVL15:
  98              	.L1:
 120:Core/u8g2/u8g2_ll_hvline.c ****   }
 121:Core/u8g2/u8g2_ll_hvline.c ****   else
 122:Core/u8g2/u8g2_ll_hvline.c ****   {    
 123:Core/u8g2/u8g2_ll_hvline.c ****     do
 124:Core/u8g2/u8g2_ll_hvline.c ****     {
 125:Core/u8g2/u8g2_ll_hvline.c **** #ifdef __unix
 126:Core/u8g2/u8g2_ll_hvline.c ****       assert(ptr < max_ptr);
 127:Core/u8g2/u8g2_ll_hvline.c **** #endif
 128:Core/u8g2/u8g2_ll_hvline.c ****       *ptr |= or_mask;
 129:Core/u8g2/u8g2_ll_hvline.c ****       *ptr ^= xor_mask;
 130:Core/u8g2/u8g2_ll_hvline.c ****       
ARM GAS  C:\Users\ASUS\AppData\Local\Temp\ccgeWLcE.s 			page 5


 131:Core/u8g2/u8g2_ll_hvline.c ****       bit_pos++;
 132:Core/u8g2/u8g2_ll_hvline.c ****       bit_pos &= 7;
 133:Core/u8g2/u8g2_ll_hvline.c **** 
 134:Core/u8g2/u8g2_ll_hvline.c ****       len--;
 135:Core/u8g2/u8g2_ll_hvline.c **** 
 136:Core/u8g2/u8g2_ll_hvline.c ****       if ( bit_pos == 0 )
 137:Core/u8g2/u8g2_ll_hvline.c ****       {
 138:Core/u8g2/u8g2_ll_hvline.c **** 	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 
 139:Core/u8g2/u8g2_ll_hvline.c **** 		
 140:Core/u8g2/u8g2_ll_hvline.c **** 	if ( u8g2->draw_color <= 1 )
 141:Core/u8g2/u8g2_ll_hvline.c **** 	  or_mask  = 1;
 142:Core/u8g2/u8g2_ll_hvline.c **** 	if ( u8g2->draw_color != 1 )
 143:Core/u8g2/u8g2_ll_hvline.c **** 	  xor_mask = 1;
 144:Core/u8g2/u8g2_ll_hvline.c ****       }
 145:Core/u8g2/u8g2_ll_hvline.c ****       else
 146:Core/u8g2/u8g2_ll_hvline.c ****       {
 147:Core/u8g2/u8g2_ll_hvline.c **** 	or_mask <<= 1;
 148:Core/u8g2/u8g2_ll_hvline.c **** 	xor_mask <<= 1;
 149:Core/u8g2/u8g2_ll_hvline.c ****       }
 150:Core/u8g2/u8g2_ll_hvline.c ****     } while( len != 0 );
 151:Core/u8g2/u8g2_ll_hvline.c ****   }
 152:Core/u8g2/u8g2_ll_hvline.c **** }
  99              		.loc 1 152 0
 100 004a F0BD     		pop	{r4, r5, r6, r7, pc}
 101              	.LVL16:
 102              	.L10:
  96:Core/u8g2/u8g2_ll_hvline.c ****   if ( u8g2->draw_color != 1 )
 103              		.loc 1 96 0
 104 004c 2646     		mov	r6, r4
 105 004e E4E7     		b	.L2
 106              	.LVL17:
 107              	.L14:
  94:Core/u8g2/u8g2_ll_hvline.c ****   if ( u8g2->draw_color <= 1 )
 108              		.loc 1 94 0
 109 0050 0024     		movs	r4, #0
 110              	.LVL18:
 111 0052 E4E7     		b	.L3
 112              	.LVL19:
 113              	.L15:
 141:Core/u8g2/u8g2_ll_hvline.c **** 	if ( u8g2->draw_color != 1 )
 114              		.loc 1 141 0
 115 0054 0126     		movs	r6, #1
 116              	.LVL20:
 117 0056 17E0     		b	.L8
 118              	.LVL21:
 119              	.L7:
 147:Core/u8g2/u8g2_ll_hvline.c **** 	xor_mask <<= 1;
 120              		.loc 1 147 0
 121 0058 7600     		lsls	r6, r6, #1
 122              	.LVL22:
 123 005a F6B2     		uxtb	r6, r6
 124              	.LVL23:
 148:Core/u8g2/u8g2_ll_hvline.c ****       }
 125              		.loc 1 148 0
 126 005c 6400     		lsls	r4, r4, #1
 127              	.LVL24:
 128 005e E4B2     		uxtb	r4, r4
ARM GAS  C:\Users\ASUS\AppData\Local\Temp\ccgeWLcE.s 			page 6


 129              	.LVL25:
 130              	.L9:
 150:Core/u8g2/u8g2_ll_hvline.c ****   }
 131              		.loc 1 150 0
 132 0060 002B     		cmp	r3, #0
 133 0062 F2D0     		beq	.L1
 134              	.L4:
 135              	.LVL26:
 128:Core/u8g2/u8g2_ll_hvline.c ****       *ptr ^= xor_mask;
 136              		.loc 1 128 0
 137 0064 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 138 0066 3243     		orrs	r2, r2, r6
 139 0068 D2B2     		uxtb	r2, r2
 129:Core/u8g2/u8g2_ll_hvline.c ****       
 140              		.loc 1 129 0
 141 006a 6240     		eors	r2, r2, r4
 142 006c 0A70     		strb	r2, [r1]
 131:Core/u8g2/u8g2_ll_hvline.c ****       bit_pos &= 7;
 143              		.loc 1 131 0
 144 006e 6A1C     		adds	r2, r5, #1
 145              	.LVL27:
 134:Core/u8g2/u8g2_ll_hvline.c **** 
 146              		.loc 1 134 0
 147 0070 013B     		subs	r3, r3, #1
 148              	.LVL28:
 149 0072 DBB2     		uxtb	r3, r3
 150              	.LVL29:
 136:Core/u8g2/u8g2_ll_hvline.c ****       {
 151              		.loc 1 136 0
 152 0074 12F00705 		ands	r5, r2, #7
 153 0078 EED1     		bne	.L7
 138:Core/u8g2/u8g2_ll_hvline.c **** 		
 154              		.loc 1 138 0
 155 007a 90F83E20 		ldrb	r2, [r0, #62]	@ zero_extendqisi2
 156              	.LVL30:
 157 007e 1144     		add	r1, r1, r2
 158              	.LVL31:
 140:Core/u8g2/u8g2_ll_hvline.c **** 	  or_mask  = 1;
 159              		.loc 1 140 0
 160 0080 90F88620 		ldrb	r2, [r0, #134]	@ zero_extendqisi2
 161 0084 012A     		cmp	r2, #1
 162 0086 E5D9     		bls	.L15
 163              	.LVL32:
 164              	.L8:
 142:Core/u8g2/u8g2_ll_hvline.c **** 	  xor_mask = 1;
 165              		.loc 1 142 0
 166 0088 012A     		cmp	r2, #1
 167 008a E9D0     		beq	.L9
 143:Core/u8g2/u8g2_ll_hvline.c ****       }
 168              		.loc 1 143 0
 169 008c 0124     		movs	r4, #1
 170              	.LVL33:
 171 008e E7E7     		b	.L9
 172              		.cfi_endproc
 173              	.LFE0:
 175              		.section	.text.u8g2_ll_hvline_horizontal_right_lsb,"ax",%progbits
 176              		.align	1
ARM GAS  C:\Users\ASUS\AppData\Local\Temp\ccgeWLcE.s 			page 7


 177              		.global	u8g2_ll_hvline_horizontal_right_lsb
 178              		.syntax unified
 179              		.thumb
 180              		.thumb_func
 181              		.fpu softvfp
 183              	u8g2_ll_hvline_horizontal_right_lsb:
 184              	.LFB1:
 153:Core/u8g2/u8g2_ll_hvline.c **** 
 154:Core/u8g2/u8g2_ll_hvline.c **** 
 155:Core/u8g2/u8g2_ll_hvline.c **** 
 156:Core/u8g2/u8g2_ll_hvline.c **** #else /* U8G2_WITH_HVLINE_SPEED_OPTIMIZATION */
 157:Core/u8g2/u8g2_ll_hvline.c **** 
 158:Core/u8g2/u8g2_ll_hvline.c **** /*
 159:Core/u8g2/u8g2_ll_hvline.c ****   x,y position within the buffer
 160:Core/u8g2/u8g2_ll_hvline.c **** */
 161:Core/u8g2/u8g2_ll_hvline.c **** static void u8g2_draw_pixel_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
 162:Core/u8g2/u8g2_ll_hvline.c **** {
 163:Core/u8g2/u8g2_ll_hvline.c ****   uint16_t offset;
 164:Core/u8g2/u8g2_ll_hvline.c ****   uint8_t *ptr;
 165:Core/u8g2/u8g2_ll_hvline.c ****   uint8_t bit_pos, mask;
 166:Core/u8g2/u8g2_ll_hvline.c ****   
 167:Core/u8g2/u8g2_ll_hvline.c ****   //assert(x >= u8g2->buf_x0);
 168:Core/u8g2/u8g2_ll_hvline.c ****   //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
 169:Core/u8g2/u8g2_ll_hvline.c ****   //assert(y >= u8g2->buf_y0);
 170:Core/u8g2/u8g2_ll_hvline.c ****   //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
 171:Core/u8g2/u8g2_ll_hvline.c ****   
 172:Core/u8g2/u8g2_ll_hvline.c ****   /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
 173:Core/u8g2/u8g2_ll_hvline.c ****   bit_pos = y;		/* overflow truncate is ok here... */
 174:Core/u8g2/u8g2_ll_hvline.c ****   bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 175:Core/u8g2/u8g2_ll_hvline.c ****   mask = 1;
 176:Core/u8g2/u8g2_ll_hvline.c ****   mask <<= bit_pos;
 177:Core/u8g2/u8g2_ll_hvline.c **** 
 178:Core/u8g2/u8g2_ll_hvline.c ****   offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 179:Core/u8g2/u8g2_ll_hvline.c ****   offset &= ~7;
 180:Core/u8g2/u8g2_ll_hvline.c ****   offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 181:Core/u8g2/u8g2_ll_hvline.c ****   ptr = u8g2->tile_buf_ptr;
 182:Core/u8g2/u8g2_ll_hvline.c ****   ptr += offset;
 183:Core/u8g2/u8g2_ll_hvline.c ****   ptr += x;
 184:Core/u8g2/u8g2_ll_hvline.c **** 
 185:Core/u8g2/u8g2_ll_hvline.c **** 
 186:Core/u8g2/u8g2_ll_hvline.c ****   if ( u8g2->draw_color <= 1 )
 187:Core/u8g2/u8g2_ll_hvline.c ****     *ptr |= mask;
 188:Core/u8g2/u8g2_ll_hvline.c ****   if ( u8g2->draw_color != 1 )
 189:Core/u8g2/u8g2_ll_hvline.c ****     *ptr ^= mask;
 190:Core/u8g2/u8g2_ll_hvline.c **** 
 191:Core/u8g2/u8g2_ll_hvline.c **** }
 192:Core/u8g2/u8g2_ll_hvline.c **** 
 193:Core/u8g2/u8g2_ll_hvline.c **** /*
 194:Core/u8g2/u8g2_ll_hvline.c ****   x,y		Upper left position of the line within the local buffer (not the display!)
 195:Core/u8g2/u8g2_ll_hvline.c ****   len		length of the line in pixel, len must not be 0
 196:Core/u8g2/u8g2_ll_hvline.c ****   dir		0: horizontal line (left to right)
 197:Core/u8g2/u8g2_ll_hvline.c **** 		1: vertical line (top to bottom)
 198:Core/u8g2/u8g2_ll_hvline.c ****   asumption: 
 199:Core/u8g2/u8g2_ll_hvline.c ****     all clipping done
 200:Core/u8g2/u8g2_ll_hvline.c **** */
 201:Core/u8g2/u8g2_ll_hvline.c **** void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, u
 202:Core/u8g2/u8g2_ll_hvline.c **** {
ARM GAS  C:\Users\ASUS\AppData\Local\Temp\ccgeWLcE.s 			page 8


 203:Core/u8g2/u8g2_ll_hvline.c ****   if ( dir == 0 )
 204:Core/u8g2/u8g2_ll_hvline.c ****   {
 205:Core/u8g2/u8g2_ll_hvline.c ****     do
 206:Core/u8g2/u8g2_ll_hvline.c ****     {
 207:Core/u8g2/u8g2_ll_hvline.c ****       u8g2_draw_pixel_vertical_top_lsb(u8g2, x, y);
 208:Core/u8g2/u8g2_ll_hvline.c ****       x++;
 209:Core/u8g2/u8g2_ll_hvline.c ****       len--;
 210:Core/u8g2/u8g2_ll_hvline.c ****     } while( len != 0 );
 211:Core/u8g2/u8g2_ll_hvline.c ****   }
 212:Core/u8g2/u8g2_ll_hvline.c ****   else
 213:Core/u8g2/u8g2_ll_hvline.c ****   {
 214:Core/u8g2/u8g2_ll_hvline.c ****     do
 215:Core/u8g2/u8g2_ll_hvline.c ****     {
 216:Core/u8g2/u8g2_ll_hvline.c ****       u8g2_draw_pixel_vertical_top_lsb(u8g2, x, y);
 217:Core/u8g2/u8g2_ll_hvline.c ****       y++;
 218:Core/u8g2/u8g2_ll_hvline.c ****       len--;
 219:Core/u8g2/u8g2_ll_hvline.c ****     } while( len != 0 );
 220:Core/u8g2/u8g2_ll_hvline.c ****   }
 221:Core/u8g2/u8g2_ll_hvline.c **** }
 222:Core/u8g2/u8g2_ll_hvline.c **** 
 223:Core/u8g2/u8g2_ll_hvline.c **** 
 224:Core/u8g2/u8g2_ll_hvline.c **** #endif /* U8G2_WITH_HVLINE_SPEED_OPTIMIZATION */
 225:Core/u8g2/u8g2_ll_hvline.c **** 
 226:Core/u8g2/u8g2_ll_hvline.c **** /*=================================================*/
 227:Core/u8g2/u8g2_ll_hvline.c **** /*
 228:Core/u8g2/u8g2_ll_hvline.c ****   u8g2_ll_hvline_horizontal_right_lsb
 229:Core/u8g2/u8g2_ll_hvline.c ****     ST7920
 230:Core/u8g2/u8g2_ll_hvline.c **** */
 231:Core/u8g2/u8g2_ll_hvline.c **** 
 232:Core/u8g2/u8g2_ll_hvline.c **** #ifdef U8G2_WITH_HVLINE_SPEED_OPTIMIZATION
 233:Core/u8g2/u8g2_ll_hvline.c **** 
 234:Core/u8g2/u8g2_ll_hvline.c **** /*
 235:Core/u8g2/u8g2_ll_hvline.c ****   x,y		Upper left position of the line within the local buffer (not the display!)
 236:Core/u8g2/u8g2_ll_hvline.c ****   len		length of the line in pixel, len must not be 0
 237:Core/u8g2/u8g2_ll_hvline.c ****   dir		0: horizontal line (left to right)
 238:Core/u8g2/u8g2_ll_hvline.c **** 		1: vertical line (top to bottom)
 239:Core/u8g2/u8g2_ll_hvline.c ****   asumption: 
 240:Core/u8g2/u8g2_ll_hvline.c ****     all clipping done
 241:Core/u8g2/u8g2_ll_hvline.c **** */
 242:Core/u8g2/u8g2_ll_hvline.c **** 
 243:Core/u8g2/u8g2_ll_hvline.c **** void u8g2_ll_hvline_horizontal_right_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t le
 244:Core/u8g2/u8g2_ll_hvline.c **** {
 185              		.loc 1 244 0
 186              		.cfi_startproc
 187              		@ args = 4, pretend = 0, frame = 0
 188              		@ frame_needed = 0, uses_anonymous_args = 0
 189              		@ link register save eliminated.
 190              	.LVL34:
 191 0000 F0B4     		push	{r4, r5, r6, r7}
 192              	.LCFI1:
 193              		.cfi_def_cfa_offset 16
 194              		.cfi_offset 4, -16
 195              		.cfi_offset 5, -12
 196              		.cfi_offset 6, -8
 197              		.cfi_offset 7, -4
 198 0002 9DF81060 		ldrb	r6, [sp, #16]	@ zero_extendqisi2
 245:Core/u8g2/u8g2_ll_hvline.c ****   uint16_t offset;
ARM GAS  C:\Users\ASUS\AppData\Local\Temp\ccgeWLcE.s 			page 9


 246:Core/u8g2/u8g2_ll_hvline.c ****   uint8_t *ptr;
 247:Core/u8g2/u8g2_ll_hvline.c ****   uint8_t bit_pos;
 248:Core/u8g2/u8g2_ll_hvline.c ****   uint8_t mask;
 249:Core/u8g2/u8g2_ll_hvline.c ****   uint8_t tile_width = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 199              		.loc 1 249 0
 200 0006 0468     		ldr	r4, [r0]
 201 0008 257C     		ldrb	r5, [r4, #16]	@ zero_extendqisi2
 202              	.LVL35:
 250:Core/u8g2/u8g2_ll_hvline.c **** 
 251:Core/u8g2/u8g2_ll_hvline.c ****   bit_pos = x;		/* overflow truncate is ok here... */
 252:Core/u8g2/u8g2_ll_hvline.c ****   bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 203              		.loc 1 252 0
 204 000a 01F00707 		and	r7, r1, #7
 205              	.LVL36:
 253:Core/u8g2/u8g2_ll_hvline.c ****   mask = 128;
 254:Core/u8g2/u8g2_ll_hvline.c ****   mask >>= bit_pos;
 206              		.loc 1 254 0
 207 000e 8024     		movs	r4, #128
 208 0010 3C41     		asrs	r4, r4, r7
 209 0012 E4B2     		uxtb	r4, r4
 210              	.LVL37:
 255:Core/u8g2/u8g2_ll_hvline.c **** 
 256:Core/u8g2/u8g2_ll_hvline.c ****   offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 257:Core/u8g2/u8g2_ll_hvline.c ****   offset *= tile_width;
 258:Core/u8g2/u8g2_ll_hvline.c ****   offset += x>>3;
 211              		.loc 1 258 0
 212 0014 C908     		lsrs	r1, r1, #3
 213              	.LVL38:
 214 0016 05FB0211 		mla	r1, r5, r2, r1
 215 001a 89B2     		uxth	r1, r1
 216              	.LVL39:
 259:Core/u8g2/u8g2_ll_hvline.c ****   ptr = u8g2->tile_buf_ptr;
 217              		.loc 1 259 0
 218 001c 826B     		ldr	r2, [r0, #56]
 219              	.LVL40:
 260:Core/u8g2/u8g2_ll_hvline.c ****   ptr += offset;
 220              		.loc 1 260 0
 221 001e 0A44     		add	r2, r2, r1
 222              	.LVL41:
 261:Core/u8g2/u8g2_ll_hvline.c ****   
 262:Core/u8g2/u8g2_ll_hvline.c ****   if ( dir == 0 )
 223              		.loc 1 262 0
 224 0020 26BB     		cbnz	r6, .L17
 225 0022 07E0     		b	.L21
 226              	.LVL42:
 227              	.L26:
 263:Core/u8g2/u8g2_ll_hvline.c ****   {
 264:Core/u8g2/u8g2_ll_hvline.c ****       
 265:Core/u8g2/u8g2_ll_hvline.c ****     do
 266:Core/u8g2/u8g2_ll_hvline.c ****     {
 267:Core/u8g2/u8g2_ll_hvline.c **** 
 268:Core/u8g2/u8g2_ll_hvline.c ****       if ( u8g2->draw_color <= 1 )
 269:Core/u8g2/u8g2_ll_hvline.c **** 	*ptr |= mask;
 228              		.loc 1 269 0
 229 0024 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 230 0026 2143     		orrs	r1, r1, r4
 231 0028 1170     		strb	r1, [r2]
ARM GAS  C:\Users\ASUS\AppData\Local\Temp\ccgeWLcE.s 			page 10


 232 002a 07E0     		b	.L18
 233              	.LVL43:
 234              	.L20:
 270:Core/u8g2/u8g2_ll_hvline.c ****       if ( u8g2->draw_color != 1 )
 271:Core/u8g2/u8g2_ll_hvline.c **** 	*ptr ^= mask;
 272:Core/u8g2/u8g2_ll_hvline.c ****       
 273:Core/u8g2/u8g2_ll_hvline.c ****       mask >>= 1;
 274:Core/u8g2/u8g2_ll_hvline.c ****       if ( mask == 0 )
 275:Core/u8g2/u8g2_ll_hvline.c ****       {
 276:Core/u8g2/u8g2_ll_hvline.c **** 	mask = 128;
 277:Core/u8g2/u8g2_ll_hvline.c ****         ptr++;
 278:Core/u8g2/u8g2_ll_hvline.c ****       }
 279:Core/u8g2/u8g2_ll_hvline.c ****       
 280:Core/u8g2/u8g2_ll_hvline.c ****       //x++;
 281:Core/u8g2/u8g2_ll_hvline.c ****       len--;
 235              		.loc 1 281 0
 236 002c 013B     		subs	r3, r3, #1
 237              	.LVL44:
 282:Core/u8g2/u8g2_ll_hvline.c ****     } while( len != 0 );
 238              		.loc 1 282 0
 239 002e 13F0FF03 		ands	r3, r3, #255
 240              	.LVL45:
 241 0032 23D0     		beq	.L16
 242              	.L21:
 243              	.LVL46:
 268:Core/u8g2/u8g2_ll_hvline.c **** 	*ptr |= mask;
 244              		.loc 1 268 0
 245 0034 90F88610 		ldrb	r1, [r0, #134]	@ zero_extendqisi2
 246 0038 0129     		cmp	r1, #1
 247 003a F3D9     		bls	.L26
 248              	.L18:
 270:Core/u8g2/u8g2_ll_hvline.c ****       if ( u8g2->draw_color != 1 )
 249              		.loc 1 270 0
 250 003c 90F88610 		ldrb	r1, [r0, #134]	@ zero_extendqisi2
 251 0040 0129     		cmp	r1, #1
 252 0042 02D0     		beq	.L19
 271:Core/u8g2/u8g2_ll_hvline.c ****       
 253              		.loc 1 271 0
 254 0044 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 255 0046 6140     		eors	r1, r1, r4
 256 0048 1170     		strb	r1, [r2]
 257              	.L19:
 258              	.LVL47:
 274:Core/u8g2/u8g2_ll_hvline.c ****       {
 259              		.loc 1 274 0
 260 004a 6408     		lsrs	r4, r4, #1
 261              	.LVL48:
 262 004c EED1     		bne	.L20
 263              	.LVL49:
 277:Core/u8g2/u8g2_ll_hvline.c ****       }
 264              		.loc 1 277 0
 265 004e 0132     		adds	r2, r2, #1
 266              	.LVL50:
 276:Core/u8g2/u8g2_ll_hvline.c ****         ptr++;
 267              		.loc 1 276 0
 268 0050 8024     		movs	r4, #128
 269 0052 EBE7     		b	.L20
ARM GAS  C:\Users\ASUS\AppData\Local\Temp\ccgeWLcE.s 			page 11


 270              	.LVL51:
 271              	.L23:
 283:Core/u8g2/u8g2_ll_hvline.c ****   }
 284:Core/u8g2/u8g2_ll_hvline.c ****   else
 285:Core/u8g2/u8g2_ll_hvline.c ****   {
 286:Core/u8g2/u8g2_ll_hvline.c ****     do
 287:Core/u8g2/u8g2_ll_hvline.c ****     {
 288:Core/u8g2/u8g2_ll_hvline.c ****       if ( u8g2->draw_color <= 1 )
 289:Core/u8g2/u8g2_ll_hvline.c **** 	*ptr |= mask;
 290:Core/u8g2/u8g2_ll_hvline.c ****       if ( u8g2->draw_color != 1 )
 272              		.loc 1 290 0
 273 0054 90F88610 		ldrb	r1, [r0, #134]	@ zero_extendqisi2
 274 0058 0129     		cmp	r1, #1
 275 005a 02D0     		beq	.L24
 291:Core/u8g2/u8g2_ll_hvline.c **** 	*ptr ^= mask;
 276              		.loc 1 291 0
 277 005c 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 278 005e 6140     		eors	r1, r1, r4
 279 0060 1170     		strb	r1, [r2]
 280              	.L24:
 292:Core/u8g2/u8g2_ll_hvline.c ****       
 293:Core/u8g2/u8g2_ll_hvline.c ****       ptr += tile_width;
 281              		.loc 1 293 0
 282 0062 2A44     		add	r2, r2, r5
 283              	.LVL52:
 294:Core/u8g2/u8g2_ll_hvline.c ****       //y++;
 295:Core/u8g2/u8g2_ll_hvline.c ****       len--;
 284              		.loc 1 295 0
 285 0064 013B     		subs	r3, r3, #1
 286              	.LVL53:
 296:Core/u8g2/u8g2_ll_hvline.c ****     } while( len != 0 );
 287              		.loc 1 296 0
 288 0066 13F0FF03 		ands	r3, r3, #255
 289              	.LVL54:
 290 006a 07D0     		beq	.L16
 291              	.L17:
 292              	.LVL55:
 288:Core/u8g2/u8g2_ll_hvline.c **** 	*ptr |= mask;
 293              		.loc 1 288 0
 294 006c 90F88610 		ldrb	r1, [r0, #134]	@ zero_extendqisi2
 295 0070 0129     		cmp	r1, #1
 296 0072 EFD8     		bhi	.L23
 289:Core/u8g2/u8g2_ll_hvline.c ****       if ( u8g2->draw_color != 1 )
 297              		.loc 1 289 0
 298 0074 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 299 0076 2143     		orrs	r1, r1, r4
 300 0078 1170     		strb	r1, [r2]
 301 007a EBE7     		b	.L23
 302              	.LVL56:
 303              	.L16:
 297:Core/u8g2/u8g2_ll_hvline.c ****   }
 298:Core/u8g2/u8g2_ll_hvline.c **** }
 304              		.loc 1 298 0
 305 007c F0BC     		pop	{r4, r5, r6, r7}
 306              	.LCFI2:
 307              		.cfi_restore 7
 308              		.cfi_restore 6
ARM GAS  C:\Users\ASUS\AppData\Local\Temp\ccgeWLcE.s 			page 12


 309              		.cfi_restore 5
 310              		.cfi_restore 4
 311              		.cfi_def_cfa_offset 0
 312              	.LVL57:
 313 007e 7047     		bx	lr
 314              		.cfi_endproc
 315              	.LFE1:
 317              		.text
 318              	.Letext0:
 319              		.file 2 "c:\\program files (x86)\\gnu_tools_arm_embedded\\7_2017-q4-major\\arm-none-eabi\\include\
 320              		.file 3 "c:\\program files (x86)\\gnu_tools_arm_embedded\\7_2017-q4-major\\arm-none-eabi\\include\
 321              		.file 4 "Core/u8g2/../u8g2/../u8g2/u8x8.h"
 322              		.file 5 "Core/u8g2/../u8g2/u8g2.h"
ARM GAS  C:\Users\ASUS\AppData\Local\Temp\ccgeWLcE.s 			page 13


DEFINED SYMBOLS
                            *ABS*:00000000 u8g2_ll_hvline.c
C:\Users\ASUS\AppData\Local\Temp\ccgeWLcE.s:16     .text.u8g2_ll_hvline_vertical_top_lsb:00000000 $t
C:\Users\ASUS\AppData\Local\Temp\ccgeWLcE.s:23     .text.u8g2_ll_hvline_vertical_top_lsb:00000000 u8g2_ll_hvline_vertical_top_lsb
C:\Users\ASUS\AppData\Local\Temp\ccgeWLcE.s:176    .text.u8g2_ll_hvline_horizontal_right_lsb:00000000 $t
C:\Users\ASUS\AppData\Local\Temp\ccgeWLcE.s:183    .text.u8g2_ll_hvline_horizontal_right_lsb:00000000 u8g2_ll_hvline_horizontal_right_lsb

NO UNDEFINED SYMBOLS
